<!--
Serialization Settings Patch File for Unicorn

This file adds pipeline items to support serializing the content tree to disk in more advanced ways than the default,
specifies which items to auto-serialize, and adds a saveUI handler to prevent overwriting changed serialized files on disk.
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<serialization>
			<!-- 
				See the Sitecore Serialization Guide for more details on how Serialization Presets work. This configuration is used
				by the default Unicorn Predicate to determine what items should be serialized. You can define other presets
				if you want to serialize multiple sets of items using different settings. 
			-->
			<default>

			</default>
		</serialization>

		<unicorn>
			<!-- 
				Configurations
				These define sets of dependencies that Unicorn runs. For example, you might want to serialize
				certain items differently, or segregate configurations so that critical ones can run separately
				from non-essential ones to save time.
				
				Each dependency type can have non-DI constructor params passed to it by adding XML attributes to the
				main declaration - e.g. <foo type="..." bar="hello"> would pass "hello" to public MyType(string bar)
				
				You can also receive any XML body passed to the dependency to a 'configNode' XmlElement parameter.
				This is how the SerializationPresetPredicate defines its preset.
			-->
			<configurations>
				<configuration name="Example">
					<predicate type="Unicorn.Predicates.SerializationPresetPredicate, Unicorn">
						<!--
							Each include can also have several types of exclusion added under them to exclude specific subitems:
							<exclude path="/sitecore/content" />
							<exclude template="Page" />
							<exclude templateid="{8EF706F3-71D1-4EE2-BADF-99018AF186C9}" />
							<exclude id="{8EF706F3-71D1-4EE2-BADF-99018AF186C9}" />
						-->

						<include database="core" path="/sitecore/system/Field types"/>
						<include database="core" path="/sitecore/system/Settings" />
						<include database="core" path="/sitecore/content/Documents and settings/All users"/>
						<include database="core" path="/sitecore/content/Applications"/>
						<include database="master" path="/sitecore/layout"/>
						<include database="master" path="/sitecore/system">
							<exclude path="/sitecore/system/Aliases"/>
							<exclude path="/sitecore/system/Marketing Center"/>
							<exclude path="/sitecore/system/Publishing targets" />
							<exclude path="/sitecore/system/Modules/Web Forms for Marketers/Website" />
							<exclude path="/sitecore/system/Modules/Web Forms for Marketers/Local Forms" />
							<exclude path="/sitecore/system/Modules/Web Forms for Marketers/Sample forms" />
							<exclude path="/sitecore/system/Modules/Azure" />
						</include>
						<include database="master" path="/sitecore/templates">
							<exclude path="/sitecore/templates/System"/>
						</include>
					</predicate>
				</configuration>
			</configurations>

			<!-- 
				These are the default Unicorn dependency configurations. These affect all configurations,
				unless specifically overridden.
			-->
			<defaults>
				<sourceDataProvider type="Unicorn.Data.SitecoreSourceDataProvider, Unicorn" />

				<evaluator type="Unicorn.Evaluators.SerializedAsMasterEvaluator, Unicorn" />
				<evaluatorLogger type="Unicorn.Evaluators.DefaultSerializedAsMasterEvaluatorLogger, Unicorn" />

				<predicate type="null" />

				<loaderLogger type="Unicorn.Loader.DefaultSerializationLoaderLogger, Unicorn" />

				<loaderConsistencyChecker type="Unicorn.Loader.DuplicateIdConsistencyChecker, Unicorn" />
				<loaderConsistencyCheckerLogger type="Unicorn.Loader.DefaultDuplicateIdConsistencyCheckerLogger, Unicorn" />

				<loaderDeserializeFailureRetryer type="Unicorn.Loader.DeserializeFailureRetryer, Unicorn" />

				<serializationProvider type="Unicorn.Serialization.Sitecore.Fiat.FiatSitecoreSerializationProvider, Unicorn" rootPath="default" />
				<serializationProviderLogger type="Unicorn.Serialization.Sitecore.Fiat.DefaultFiatDeserializerLogger, Unicorn" />

				<dataProvider type="Unicorn.DefaultUnicornDataProviderLogger, Unicorn" />

				<logger type="Unicorn.Logging.PubSubLogger, Unicorn" />
			</defaults>

			<!--
				The configuration provider wires up how the configuration(s) Unicorn is running are parsed.
				The default provider reads values from this config section.
			-->
			<configurationProvider type="Unicorn.Dependencies.XmlConfigurationProvider, Unicorn" />
		</unicorn>

		<processors>
			<saveUI>
				<!-- 
					This processor will compare the pre-save version of the item to what's serialized on disk
					and throw a warning box if they do not match. This helps prevent overwriting of data if you
					happen to forget to sync changes into Sitecore.
				-->
				<processor patch:before="*[@type='Sitecore.Pipelines.Save.Save, Sitecore.Kernel']" mode="on" type="Unicorn.SerializationConflictProcessor, Unicorn"/>
			</saveUI>
		</processors>

		<dataProviders>
			<!-- 
				Register the Unicorn data provider for use. If a database hooks to the Unicorn data provider it will
				automatically synchronize changes to the database that match the predicate into the serialization provider.
			-->
			<unicorn type="Unicorn.Unicorn$(database)DataProvider, Unicorn">
				<param connectionStringName="$(1)"/>
				<Name>$(1)</Name>
			</unicorn>
		</dataProviders>

		<!-- 
			Hook the Unicorn Data Provider into the master and core databases.
			If you're not syncing anything in core you can safely unregister it from there.
			
			REMOVE THESE PATCHES ON CONTENT DELIVERY ENVIRONMENTS to avoid any performance hit from pointless serialization checks.
		-->
		<databases>
			<database id="master">
				<dataProviders>
					<dataProvider>
						<patch:attribute name="ref">dataProviders/unicorn</patch:attribute>
					</dataProvider>
				</dataProviders>
			</database>
			<database id="core">
				<dataProviders>
					<dataProvider>
						<patch:attribute name="ref">dataProviders/unicorn</patch:attribute>
					</dataProvider>
				</dataProviders>
			</database>
		</databases>
	</sitecore>
</configuration>
